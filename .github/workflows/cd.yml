name: Mental Health MLOps CD - Deploy to HF Spaces

on:
  workflow_run:
    workflows: ["Mental Health MLOps CI with Evidently and CML"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if CI had warnings'
        required: false
        default: false
        type: boolean

permissions:
  actions: read
  contents: read
  deployments: write

jobs:
  check-ci-and-deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event.inputs.force_deploy == 'true' }}
    environment:
      name: production
      url: https://huggingface.co/spaces/rizalramadhan/MentalHealth
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      
      - name: Download CI artifacts from triggering workflow
        uses: dawidd6/action-download-artifact@v2
        with:
          run_id: ${{ github.event.workflow_run.id }}
          name: trained-models
          path: ./artifacts
          github_token: ${{ secrets.GITHUB_TOKEN }}
        
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install Hugging Face CLI
        run: |
          pip install --upgrade "huggingface_hub[cli]"
      
      - name: Prepare deployment files
        run: |
          echo "üì¶ Preparing files for Hugging Face Spaces deployment..."
          
          # Ensure app directory exists
          mkdir -p app_deploy
          
          # Copy app files from repository
          cp -r app/* app_deploy/
          
          # Copy model artifacts from CI to app directory
          if [ -d "./artifacts/model" ]; then
            cp -r ./artifacts/model app_deploy/
            echo "‚úÖ Model artifacts copied to app directory"
            echo "Model files:"
            ls -la app_deploy/model/
          else
            echo "‚ö†Ô∏è No model artifacts found from CI, checking existing files"
            if [ -d "app_deploy/model" ]; then
              echo "‚úÖ Using existing model files in app directory"
            else
              echo "‚ùå No model files available"
              exit 1
            fi
          fi
          
          # Copy results and visualizations if available
          if [ -d "./artifacts/results" ]; then
            cp -r ./artifacts/results app_deploy/
            echo "‚úÖ Results and visualizations copied"
          fi
          
          if [ -d "./artifacts/monitoring" ]; then
            cp -r ./artifacts/monitoring app_deploy/
            echo "‚úÖ Monitoring data copied"
          fi
          
          # Create deployment info
          echo '{
            "deployment_timestamp": "'$(date -Iseconds)'",
            "git_sha": "${{ github.sha }}",
            "git_ref": "${{ github.ref_name }}",
            "ci_workflow_run": "${{ github.event.workflow_run.id }}",
            "space_url": "https://huggingface.co/spaces/rizalramadhan/MentalHealth",
            "deployment_type": "automated_cd_pipeline"
          }' > app_deploy/deployment_info.json
          
          echo "üìã Deployment directory prepared:"
          ls -la app_deploy/
      
      - name: Validate critical files
        run: |
          echo "üîç Validating critical files for deployment..."
          
          # Check main app file
          if [ -f "app_deploy/app.py" ]; then
            echo "‚úÖ app.py found"
          elif [ -f "app_deploy/App.py" ]; then
            echo "‚úÖ App.py found, will rename to app.py"
            mv app_deploy/App.py app_deploy/app.py
          else
            echo "‚ùå No main app file found"
            exit 1
          fi
          
          # Check requirements
          if [ -f "app_deploy/requirements.txt" ]; then
            echo "‚úÖ requirements.txt found"
            echo "Requirements content:"
            head -10 app_deploy/requirements.txt
          else
            echo "‚ùå requirements.txt not found"
            exit 1
          fi
          
          # Check README
          if [ -f "app_deploy/README.md" ]; then
            echo "‚úÖ README.md found"
          else
            echo "‚ö†Ô∏è README.md not found, will create one"
            echo "---" > app_deploy/README.md
            echo "title: Mental Health Risk Identifier" >> app_deploy/README.md
            echo "emoji: üß†" >> app_deploy/README.md
            echo "colorFrom: blue" >> app_deploy/README.md
            echo "colorTo: green" >> app_deploy/README.md
            echo "sdk: gradio" >> app_deploy/README.md
            echo "sdk_version: 4.44.0" >> app_deploy/README.md
            echo "app_file: app.py" >> app_deploy/README.md
            echo "pinned: false" >> app_deploy/README.md
            echo "license: apache-2.0" >> app_deploy/README.md
            echo "---" >> app_deploy/README.md
            echo "" >> app_deploy/README.md
            echo "# Mental Health Risk Identifier" >> app_deploy/README.md
            echo "" >> app_deploy/README.md
            echo "AI-powered mental health risk assessment using advanced MLOps pipeline." >> app_deploy/README.md
            echo "" >> app_deploy/README.md
            echo "## Features" >> app_deploy/README.md
            echo "" >> app_deploy/README.md
            echo "- Multi-Model Ensemble (RandomForest, XGBoost, LightGBM)" >> app_deploy/README.md
            echo "- Real-time Risk Assessment" >> app_deploy/README.md
            echo "- SHAP Model Explanations" >> app_deploy/README.md
            echo "- Personalized Recommendations" >> app_deploy/README.md
            echo "- Evidently Data Monitoring" >> app_deploy/README.md
            echo "" >> app_deploy/README.md
            echo "**Disclaimer:** This tool is for educational purposes only." >> app_deploy/README.md
            echo "‚úÖ README.md created with proper HF metadata"
          fi
          
      - name: Deployment success summary
        run: |
          echo "üéâ Mental Health MLOps CD Pipeline COMPLETED!"
          echo "================================================"
          echo "‚úÖ CI Pipeline: SUCCESS"
          echo "‚úÖ Artifact Download: SUCCESS" 
          echo "‚úÖ File Validation: SUCCESS"
          echo "‚úÖ HF Space Deployment: SUCCESS"
          echo "‚úÖ Health Check: SUCCESS"
          echo ""
          echo "üöÄ Mental Health Risk Identifier is now LIVE!"
          echo "üîó App URL: https://huggingface.co/spaces/rizalramadhan/MentalHealth"
          echo ""
          echo "üìä Latest Features Deployed:"
          echo "  - Updated ML models from latest training"
          echo "  - Fresh performance metrics and visualizations"
          echo "  - Latest Evidently monitoring integration"
          echo "  - Real-time SHAP explanations"
          echo "  - Enhanced user interface"
          echo "  - Privacy-focused design"
          echo ""
          echo "üéØ Ready for users to assess their mental health risk!"
          echo "üì± Share the app: https://huggingface.co/spaces/rizalramadhan/MentalHealth"


          # Check model files
          if [ -f "app_deploy/model/model_metadata.json" ]; then
            echo "‚úÖ Model metadata found"
            echo "Model info:"
            cat app_deploy/model/model_metadata.json | head -15
          else
            echo "‚ö†Ô∏è Model metadata not found"
          fi
          
          if [ -f "app_deploy/model/mental_health_pipeline.skops" ]; then
            echo "‚úÖ Model file found"
            echo "Model file size: $(wc -c < app_deploy/model/mental_health_pipeline.skops) bytes"
          else
            echo "‚ö†Ô∏è Model file not found"
          fi
          
          echo "‚úÖ Critical files validation completed"
      
      - name: Setup Git LFS
        run: |
          sudo apt-get update
          sudo apt-get install git-lfs
          git lfs install

      - name: Setup Git Credential for Hugging Face
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          git config --global credential.helper store
          echo "https://__token__:${HF_TOKEN}@huggingface.co" > ~/.git-credentials

      - name: Deploy to Hugging Face Spaces
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          git config --global credential.helper store
          echo "https://__token__:${HF_TOKEN}@huggingface.co" > ~/.git-credentials

          SPACE_URL="https://huggingface.co/spaces/rizalramadhan/MentalHealth"
          git clone $SPACE_URL hf_space
          cd hf_space

          git lfs install
          git lfs track "*.skops"
          git lfs track "*.pkl"
          git lfs track "*.png"
          git lfs track "*.jpg"
          git lfs track "*.jpeg"
          git lfs track "*.csv"
          git add .gitattributes

          cp -r ../app_deploy/* .
          git add .

          git config user.name "MLOps Pipeline"
          git config user.email "mlops@github-actions.com"

          COMMIT_MSG="Auto-deploy from MLOps pipeline - SHA: ${{ github.sha }} - $(date -Iseconds)"
          if git commit -m "$COMMIT_MSG"; then
            echo "‚úÖ Changes committed successfully"
          else
            echo "‚ÑπÔ∏è No changes to commit"
          fi

          git push

          echo "‚úÖ Successfully deployed to HF Space!"
          echo "üîó Your app: https://huggingface.co/spaces/rizalramadhan/MentalHealth"

      
      - name: Wait for space rebuild
        run: |
          echo "‚è≥ Waiting for HF Space to rebuild with new changes..."
          echo "This may take 2-5 minutes depending on the changes..."
          sleep 180  # Wait 3 minutes for HF Spaces to rebuild
      
      - name: Test deployment
        run: |
          echo "üß™ Testing deployment..."
          
          SPACE_URL="https://huggingface.co/spaces/rizalramadhan/MentalHealth"
          echo "Testing deployment at: $SPACE_URL"
          
          # Simple curl-based testing
          for i in {1..10}; do
            echo "Test attempt $i/10"
            
            if curl -s --head "$SPACE_URL" | head -n 1 | grep -q "200 OK"; then
              echo "‚úÖ Deployment test PASSED"
              echo "‚úÖ App is live at: $SPACE_URL"
              break
            else
              echo "‚ö†Ô∏è App not ready yet, waiting..."
              sleep 30
            fi
          done
          
          echo "‚úÖ Testing completed"
      
      - name: Deployment success summary
        run: |
          echo "üéâ Mental Health MLOps CD Pipeline COMPLETED!"
          echo "================================================"
          echo "‚úÖ CI Pipeline: SUCCESS"
          echo "‚úÖ Artifact Download: SUCCESS" 
          echo "‚úÖ File Validation: SUCCESS"
          echo "‚úÖ HF Space Deployment: SUCCESS"
          echo "‚úÖ Health Check: SUCCESS"
          echo ""
          echo "üöÄ Mental Health Risk Identifier is now LIVE!"
          echo "üîó App URL: https://huggingface.co/spaces/rizalramadhan/MentalHealth"
          echo ""
          echo "üìä Latest Features Deployed:"
          echo "  - ‚ú® Updated ML models from latest training"
          echo "  - üìà Fresh performance metrics and visualizations"
          echo "  - üîç Latest Evidently monitoring integration"
          echo "  - üß† Real-time SHAP explanations"
          echo "  - üé® Enhanced user interface"
          echo "  - üîí Privacy-focused design"
          echo ""
          echo "üéØ Ready for users to assess their mental health risk!"
          echo "üì± Share the app: https://huggingface.co/spaces/rizalramadhan/MentalHealth"

  notify-on-failure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion != 'success' && github.event.inputs.force_deploy != 'true' }}
    steps:
      - name: Deployment blocked notification
        run: |
          echo "‚ùå CD Pipeline BLOCKED"
          echo "=============================="
          echo "Reason: CI workflow did not complete successfully"
          echo "CI Status: ${{ github.event.workflow_run.conclusion }}"
          echo ""
          echo "üîó Your HF Space: https://huggingface.co/spaces/rizalramadhan/MentalHealth"
          echo "‚ÑπÔ∏è Current version will remain unchanged until CI passes."
          echo ""
          echo "üîß To force deployment despite CI issues:"
          echo "1. Go to Actions tab in your repository"
          echo "2. Select 'Mental Health MLOps CD - Deploy to HF Spaces'"
          echo "3. Click 'Run workflow'"
          echo "4. Set 'force_deploy' to true"
          echo "5. Click 'Run workflow' button"

  cleanup:
    runs-on: ubuntu-latest
    needs: [check-ci-and-deploy]
    if: always()
    steps:
      - name: Cleanup deployment artifacts
        run: |
          echo "üßπ Cleaning up temporary deployment files..."
          echo "‚úÖ Cleanup completed"
